# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import sample_pb2 as sample__pb2

GRPC_GENERATED_VERSION = '1.66.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in sample_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ClientStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/lib.Client/Ping',
                request_serializer=sample__pb2.MessageBool.SerializeToString,
                response_deserializer=sample__pb2.MessageBool.FromString,
                _registered_method=True)
        self.Command = channel.unary_stream(
                '/lib.Client/Command',
                request_serializer=sample__pb2.GeneralMsg.SerializeToString,
                response_deserializer=sample__pb2.GeneralMsg.FromString,
                _registered_method=True)
        self.DownloadFileCommand = channel.unary_stream(
                '/lib.Client/DownloadFileCommand',
                request_serializer=sample__pb2.GeneralMsg.SerializeToString,
                response_deserializer=sample__pb2.CFileMsg.FromString,
                _registered_method=True)
        self.UploadFileCommand = channel.stream_unary(
                '/lib.Client/UploadFileCommand',
                request_serializer=sample__pb2.CFileMsg.SerializeToString,
                response_deserializer=sample__pb2.GeneralMsg.FromString,
                _registered_method=True)


class ClientServicer(object):
    """Interface exported by the server.
    """

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Command(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFileCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFileCommand(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=sample__pb2.MessageBool.FromString,
                    response_serializer=sample__pb2.MessageBool.SerializeToString,
            ),
            'Command': grpc.unary_stream_rpc_method_handler(
                    servicer.Command,
                    request_deserializer=sample__pb2.GeneralMsg.FromString,
                    response_serializer=sample__pb2.GeneralMsg.SerializeToString,
            ),
            'DownloadFileCommand': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadFileCommand,
                    request_deserializer=sample__pb2.GeneralMsg.FromString,
                    response_serializer=sample__pb2.CFileMsg.SerializeToString,
            ),
            'UploadFileCommand': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadFileCommand,
                    request_deserializer=sample__pb2.CFileMsg.FromString,
                    response_serializer=sample__pb2.GeneralMsg.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lib.Client', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lib.Client', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Client(object):
    """Interface exported by the server.
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lib.Client/Ping',
            sample__pb2.MessageBool.SerializeToString,
            sample__pb2.MessageBool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Command(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/lib.Client/Command',
            sample__pb2.GeneralMsg.SerializeToString,
            sample__pb2.GeneralMsg.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadFileCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/lib.Client/DownloadFileCommand',
            sample__pb2.GeneralMsg.SerializeToString,
            sample__pb2.CFileMsg.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadFileCommand(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/lib.Client/UploadFileCommand',
            sample__pb2.CFileMsg.SerializeToString,
            sample__pb2.GeneralMsg.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/lib.AI/Ping',
                request_serializer=sample__pb2.MessageBool.SerializeToString,
                response_deserializer=sample__pb2.MessageBool.FromString,
                _registered_method=True)
        self.Command = channel.unary_stream(
                '/lib.AI/Command',
                request_serializer=sample__pb2.GeneralMsg.SerializeToString,
                response_deserializer=sample__pb2.GeneralMsg.FromString,
                _registered_method=True)
        self.DownloadFileCommand = channel.unary_stream(
                '/lib.AI/DownloadFileCommand',
                request_serializer=sample__pb2.GeneralMsg.SerializeToString,
                response_deserializer=sample__pb2.CFileMsg.FromString,
                _registered_method=True)
        self.UploadFileCommand = channel.stream_unary(
                '/lib.AI/UploadFileCommand',
                request_serializer=sample__pb2.CFileMsg.SerializeToString,
                response_deserializer=sample__pb2.GeneralMsg.FromString,
                _registered_method=True)


class AIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Command(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadFileCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFileCommand(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=sample__pb2.MessageBool.FromString,
                    response_serializer=sample__pb2.MessageBool.SerializeToString,
            ),
            'Command': grpc.unary_stream_rpc_method_handler(
                    servicer.Command,
                    request_deserializer=sample__pb2.GeneralMsg.FromString,
                    response_serializer=sample__pb2.GeneralMsg.SerializeToString,
            ),
            'DownloadFileCommand': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadFileCommand,
                    request_deserializer=sample__pb2.GeneralMsg.FromString,
                    response_serializer=sample__pb2.CFileMsg.SerializeToString,
            ),
            'UploadFileCommand': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadFileCommand,
                    request_deserializer=sample__pb2.CFileMsg.FromString,
                    response_serializer=sample__pb2.GeneralMsg.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lib.AI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lib.AI', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lib.AI/Ping',
            sample__pb2.MessageBool.SerializeToString,
            sample__pb2.MessageBool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Command(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/lib.AI/Command',
            sample__pb2.GeneralMsg.SerializeToString,
            sample__pb2.GeneralMsg.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadFileCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/lib.AI/DownloadFileCommand',
            sample__pb2.GeneralMsg.SerializeToString,
            sample__pb2.CFileMsg.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadFileCommand(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/lib.AI/UploadFileCommand',
            sample__pb2.CFileMsg.SerializeToString,
            sample__pb2.GeneralMsg.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NetShellStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.log = channel.unary_unary(
                '/lib.NetShell/log',
                request_serializer=sample__pb2.GeneralMsg.SerializeToString,
                response_deserializer=sample__pb2.GeneralMsg.FromString,
                _registered_method=True)


class NetShellServicer(object):
    """Missing associated documentation comment in .proto file."""

    def log(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NetShellServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'log': grpc.unary_unary_rpc_method_handler(
                    servicer.log,
                    request_deserializer=sample__pb2.GeneralMsg.FromString,
                    response_serializer=sample__pb2.GeneralMsg.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lib.NetShell', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lib.NetShell', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NetShell(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def log(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lib.NetShell/log',
            sample__pb2.GeneralMsg.SerializeToString,
            sample__pb2.GeneralMsg.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TestStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/lib.Test/Ping',
                request_serializer=sample__pb2.MessageBool.SerializeToString,
                response_deserializer=sample__pb2.MessageBool.FromString,
                _registered_method=True)


class TestServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=sample__pb2.MessageBool.FromString,
                    response_serializer=sample__pb2.MessageBool.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lib.Test', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lib.Test', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Test(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lib.Test/Ping',
            sample__pb2.MessageBool.SerializeToString,
            sample__pb2.MessageBool.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
